"""
Django settings for core project.

Generated by 'django-admin startproject' using Django 4.1.2.

For more information on this file, see
https://docs.djangoproject.com/en/4.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.1/ref/settings/
"""

import os, random, string
from pathlib import Path
from dotenv import load_dotenv
from str2bool import str2bool

load_dotenv()  # take environment variables from .env.

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.environ.get('SECRET_KEY', 'Super_Secr3t_9999')

# Enable/Disable DEBUG Mode
DEBUG = str2bool(os.environ.get('DEBUG'))
#print(' DEBUG -> ' + str(DEBUG) ) 

# Docker HOST
ALLOWED_HOSTS = ['*']

# Add here your deployment HOSTS
CSRF_TRUSTED_ORIGINS = ['http://localhost:8000', 'http://localhost:5085', 'http://127.0.0.1:8000', 'http://127.0.0.1:5085']

#Render Context
RENDER_EXTERNAL_HOSTNAME = os.environ.get('RENDER_EXTERNAL_HOSTNAME')
if RENDER_EXTERNAL_HOSTNAME:    
    ALLOWED_HOSTS.append(RENDER_EXTERNAL_HOSTNAME)

# Application definition

INSTALLED_APPS = [
    "jazzmin",
    'admin_adminlte.apps.AdminAdminlteConfig',
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",

    # Serve UI pages
    "apps.pages",

    # TRAUCK accounts extension
    'apps.accounts_ext',

    # Dynamic DT
    "apps.dyn_dt",

    # Dynamic API
    "apps.dyn_api",

    # Charts
    "apps.charts",
    # Exams app (TRAUCK) - minimal addition
    'apps.exams',
    # Communications app
    'apps.communications',
    # Common utilities (templatetags, helpers)
    'apps.common',
    # FAQ and Support
    'apps.faq',
    'apps.support',

    # Tooling API-GEN
    'rest_framework',            # Include DRF           # <-- NEW 
    'rest_framework.authtoken',  # Include DRF Auth      # <-- NEW   
]

# --- allauth / sites (social login) ---
INSTALLED_APPS += [
    'django.contrib.sites',
    'allauth',
    'allauth.account',
    # socialaccount and providers temporarily disabled
]

# TRAUCK core models (commented - enable when needed)
# 'apps.common',
# 'apps.accounts_ext',
# 'apps.companies',
# 'apps.drivers',
# 'apps.vehicles',
# 'apps.operations',
# 'apps.memberships',
# 'apps.billing',
# 'apps.documents',
# 'apps.activity',

MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    "whitenoise.middleware.WhiteNoiseMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    # allauth middleware (required)
    'allauth.account.middleware.AccountMiddleware',
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    # Require login for admin_adminlte dashboards
    'config.middleware.AdminDashboardLoginRequiredMiddleware',
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
]

ROOT_URLCONF = "config.urls"

HOME_TEMPLATES = os.path.join(BASE_DIR, 'templates')

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [HOME_TEMPLATES],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
                # Expose Retell/embed settings to templates
                "apps.common.context_processors.retell_settings",
            ],
        },
    },
]

WSGI_APPLICATION = "config.wsgi.application"

# Site ID for django.contrib.sites (used by allauth)
SITE_ID = int(os.environ.get('SITE_ID', 1))


# Database
# https://docs.djangoproject.com/en/4.1/ref/settings/#databases

DB_ENGINE   = os.getenv('DB_ENGINE'   , None)
DB_USERNAME = os.getenv('DB_USERNAME' , None)
DB_PASS     = os.getenv('DB_PASS'     , None)
DB_HOST     = os.getenv('DB_HOST'     , None)
DB_PORT     = os.getenv('DB_PORT'     , None)
DB_NAME     = os.getenv('DB_NAME'     , None)

if DB_ENGINE and DB_NAME and DB_USERNAME:
    DATABASES = { 
      'default': {
        'ENGINE'  : 'django.db.backends.' + DB_ENGINE, 
        'NAME'    : DB_NAME,
        'USER'    : DB_USERNAME,
        'PASSWORD': DB_PASS,
        'HOST'    : DB_HOST,
        'PORT'    : DB_PORT,
        }, 
    }
else:
    DATABASES = {
        'default': {
            'ENGINE': 'django.db.backends.sqlite3',
            'NAME': 'db.sqlite3',
        }
    }

# Password validation
# https://docs.djangoproject.com/en/4.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]


# Internationalization
# https://docs.djangoproject.com/en/4.1/topics/i18n/

LANGUAGE_CODE = "en-us"

TIME_ZONE = "UTC"

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.1/howto/static-files/

STATIC_URL = '/static/'
STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')

STATICFILES_DIRS = (
    os.path.join(BASE_DIR, 'static'),
)

#if not DEBUG:
#    STATICFILES_STORAGE = 'whitenoise.storage.CompressedManifestStaticFilesStorage'

# Default primary key field type
# https://docs.djangoproject.com/en/4.1/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"

LOGIN_REDIRECT_URL = '/'
# Email backend - use SMTP when configured via .env, otherwise console for dev
EMAIL_BACKEND = os.environ.get('EMAIL_BACKEND', 'django.core.mail.backends.console.EmailBackend')

# SMTP settings (placeholders read from .env)
EMAIL_HOST = os.environ.get('EMAIL_HOST', '')
EMAIL_PORT = int(os.environ.get('EMAIL_PORT', 0) or 0)
EMAIL_HOST_USER = os.environ.get('EMAIL_HOST_USER', '')
EMAIL_HOST_PASSWORD = os.environ.get('EMAIL_HOST_PASSWORD', '')
EMAIL_USE_TLS = str2bool(os.environ.get('EMAIL_USE_TLS')) if os.environ.get('EMAIL_USE_TLS') is not None else True
DEFAULT_FROM_EMAIL = os.environ.get('DEFAULT_FROM_EMAIL', EMAIL_HOST_USER)

# django-allauth configuration
AUTHENTICATION_BACKENDS = [
    'django.contrib.auth.backends.ModelBackend',
    'allauth.account.auth_backends.AuthenticationBackend',
]

ACCOUNT_AUTHENTICATION_METHOD = os.environ.get('ACCOUNT_AUTHENTICATION_METHOD', 'username_email')
ACCOUNT_EMAIL_REQUIRED = True
ACCOUNT_EMAIL_VERIFICATION = os.environ.get('ACCOUNT_EMAIL_VERIFICATION', 'mandatory')
ACCOUNT_USERNAME_REQUIRED = True
ACCOUNT_LOGIN_ON_EMAIL_CONFIRMATION = True

SOCIALACCOUNT_PROVIDERS = {
    'google': {
        'SCOPE': [
            'profile',
            'email',
        ],
        'AUTH_PARAMS': {
            'access_type': 'online',
        }
    }
}

# ### DYNAMIC_DATATB Settings ###
DYNAMIC_DATATB = {
    # SLUG -> Import_PATH 
    'product'  : "apps.pages.models.Product",
}
########################################

# Syntax: URI -> Import_PATH
DYNAMIC_API = {
    # SLUG -> Import_PATH 
    'product'  : "apps.pages.models.Product",
}

REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': [
        'rest_framework.authentication.SessionAuthentication',
        'rest_framework.authentication.TokenAuthentication',
    ],
}
########################################

# --- Retell AI / communications settings ---
RETELL_API_URL = os.environ.get('RETELL_API_URL')
RETELL_API_KEY = os.environ.get('RETELL_API_KEY')
RETELL_AGENT_ID = os.environ.get('RETELL_AGENT_ID')
RETELL_API_MODEL = os.environ.get('RETELL_API_MODEL')

# Optional phone number for the call FAB (E.164 format, e.g. +12137774444)
PHONE_NUMBER = os.environ.get('PHONE_NUMBER')

# Retell widget embed support (optional) - read from environment
RETELL_EMBED_URL = os.environ.get('RETELL_EMBED_URL', '')  # script URL provided by Retell
RETELL_EMBED_ENABLED = str2bool(os.environ.get('RETELL_EMBED_ENABLED')) if os.environ.get('RETELL_EMBED_ENABLED') is not None else False
RETELL_EMBED_OPEN_FN = os.environ.get('RETELL_EMBED_OPEN_FN', '')  # optional dot-path to global open function, e.g. 'retellWidget.open'

# Public key for Retell widget embed (do NOT use RETELL_API_KEY here)
RETELL_PUBLIC_KEY = os.environ.get('RETELL_PUBLIC_KEY', '')

# Disable client-side reCAPTCHA usage for the Retell embed (useful for local/dev)
RETELL_DISABLE_RECAPTCHA = str2bool(os.environ.get('RETELL_DISABLE_RECAPTCHA')) if os.environ.get('RETELL_DISABLE_RECAPTCHA') is not None else False

# Retell widget embed support (optional)
# (embed settings removed â€” restored original configuration)
# Development: mock Retell responses when set to a truthy value
RETELL_MOCK = str2bool(os.environ.get('RETELL_MOCK')) if os.environ.get('RETELL_MOCK') is not None else False
